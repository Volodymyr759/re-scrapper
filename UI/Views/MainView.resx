<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        LDQAAAAAAAAAAAAAAAAAAAAAAAAAALUcLde4IC3UtiMqQrQpKUS9LyxGvyoqDMdyK3fHbil7zYsqu9ae
        K/7UmCr/zYMq/82GKv/Ohyr/zYYq/82GKv/Nhir/zYYq/82GKv/Nhir/zYUq/9OVK//epSz/z44p0clu
        LHvIcSuHyXIrLwAAAAAAAAAAAAAAAAAAAAAAAAAAthsuzbogLv63Iynuticp774qKvS5LyxMxWYphMZk
        KYrMgCjV1o4s/86HK//LfCv/y3or/8t6K//Leiv/y3or/8t6K//Leiv/y3or/8t6K//LeCv/zogq/9iY
        K//PiirdxWQqbsVlK3fCZyoqAAAAAAAAAAAAAAAAAAAAAAAAAAC1HCzatR4sz7AjLB25LCwdtSkpH7Y3
        Nw7EWyiSwlkrmshvKtfQfCz/ynYr/8huK//IbSv/yG0r/8htK//IbSv/yG0r/8htK//IbSv/yG0r/8hr
        K//Mfir/1o8r/8t/KdbEVitfxFktZ8ZcKiQAAAAAAAAAAAAAAAAAAAAAAAAAALUbK93CIDD/tiIq5Lcm
        KuS4JyvnuC4q2MFRK6HATiyqxV0q3cxqLP/HZyv/xWAr/8VfK//FXyv/xV8r/8VfK//FXyv/xV4r/8Rb
        K//EXSv/xF0r/8lyK//Uhi3/ynkq0sJKKk+/TitYv1AoIAAAAAAAAAAAAAAAAAAAAAAAAAAAtBsrQcIf
        MVO4IipauCgqWrkqKlu2LidUvUMqsrpCKcXBTyjjx1os/8NXK//CUiv/wlIr/8JSK//CUiv/wlIr/8FP
        K//CUSv/xmMr/8NXK//ASiv/x2gr/9N9Lf/JbyvOvT4qQsFBLUrCRykZAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC5PCo3ujUonr09KvDCRy3/v0gs/79GLP+/RSz/vkQs/75C
        LP+9Pyz/wVEs/8lwK//MgSv/y3or/8hsK//Haiv/0G8t/8ZmKsy8MiwuujsxGqpVAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqAAADwE0sr8hCL/+7Myz/vDcs/7w4
        LP+7NSz/vDos/8RbLP/Kcyv/y3Yr/8t7K//OiCr/0I8q/82CK//ScS3/xmAswaoAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGYimU0mIu/75A
        LP+4KC3/tyQt/7cjLf+9Pyz/yG0r/8htK//KeCr/zH4q/8x9Kv/LfCr/zIEq/9Z9Lf/DXiu8AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBQ
        K5/aXDH/w1Us/79HLP+5KS3/sxEt/7s1Lf/IbCv/yHAr/8lwK//Ibiv/yG4r/8hvK//IcSv/2G8v/8FP
        KsYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAvUcuMsVELr7KRi//x0gu/75FLP+6Miz/wEks/8ZjK//FXyv/xV8r/8VfK//FXyv/x18r/8xj
        Lf/KWyvfvkUpSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAL87LVu+Nyvdyjkw/8E4Lf+9QSz/wVAr/8FOK//BTiv/wU4r/8RO
        LP/ATCz5wVEr5cFUKowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKoAVQO9LCx/uyUt8scvMP++Oyz/vjws/8A8
        Lf+7Oyz+vjwq6Lw8Kda5PinRvEEsbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0YAkHMdiLHq+QiumtyQrRwAAAAC1GygmuxovpL0c
        L/+/JC7/uCcs+LUlK+23JivguCorsLkwLEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANmzJhTSliiSyXUqssJRLLm6LyzTtBktZgAA
        AAAAAAAAtA4sS7IMLFazGy05tBUsp7MXLG+qADkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MgkHNSrK5XNiCqfx2gqqb9A
        Ksa4Kix6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADe3iwX3cApjtOe
        Kp3MfCykxFgqx7w+LG8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
        AALczSgz2K8rgs+QK6HGaipsv0oqGAAAAAAAAAAAAAAAAAAAAAAAAAAAsRYsF75HKk/MiDMPAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADYsScN158oIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC5MSuHw2Iq19Wl
        KlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBT
        K03RjSqL3MspLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>